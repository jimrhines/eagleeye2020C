{
	"version": 3,
	"file": "mixins.min.css",
	"sources": [
		"mixins.scss"
	],
	"sourcesContent": [
		"// focus elements\r\n@focus(){\r\n  outline-style: solid;\r\n  outline-color: blue;\r\n  outline-width: 2px;\r\n  outline-offset: 1px;\r\n}\r\n\r\n// border radius\r\n@mixin border-radius($radius) {\r\n  -webkit-border-radius: $radius;\r\n     -moz-border-radius: $radius;\r\n      -ms-border-radius: $radius;\r\n          border-radius: $radius;\r\n}\r\n\r\n// transition\r\n@mixin trans($ms) {\r\n    -webkit-transition: all $ms ease;\r\n    -moz-transition: all $ms ease;\r\n    -ms-transition: all $ms ease;\r\n    -o-transition: all $ms ease;\r\n    transition: all $ms ease;\r\n}\r\n\r\n// usage: font-size(1.6) = 16px and 1.6 rem;\r\n@mixin font-size($sizeValue: 1.6) {\r\n    font-size: ($sizeValue * 10) + px;\r\n    font-size: $sizeValue + rem;\r\n}\r\n\r\n// generic transform\r\n@mixin transform($transforms) {\r\n    -webkit-transform: $transforms;\r\n    -moz-transform: $transforms;\r\n    -ms-transform: $transforms;\r\n    -o-transform: $transforms;\r\n    transform: $transforms;\r\n}\r\n@mixin rotate($deg) {\r\n    @include transform(rotate(#{$deg}deg));\r\n}\r\n// scale\r\n@mixin scale($scale) {\r\n    @include transform(scale($scale));\r\n}\r\n// translate\r\n@mixin translate ($x, $y) {\r\n    @include transform(translate($x, $y));\r\n}\r\n// skew\r\n@mixin skew ($x, $y) {\r\n    @include transform(skew(#{$x}deg, #{$y}deg));\r\n}\r\n//transform origin\r\n@mixin transform-origin ($origin) {\r\n    -webkit-transform-origin: $origin;\r\n    -ms-transform-origin: $origin;\r\n    -o-transform-origin: $origin;\r\n    transform-origin: $origin;\r\n\r\n    moz-transform-origin: $origin;\r\n}\r\n// usage: @include placeholder { color: #000; }\r\n@mixin placeholder {\r\n    ::-webkit-input-placeholder {\r\n        @content;\r\n    }\r\n    :-moz-placeholder {\r\n        @content;\r\n    }\r\n    ::-moz-placeholder {\r\n        @content;\r\n    }\r\n    :-ms-input-placeholder {\r\n        @content;\r\n    }\r\n}\r\n//usage: @include keyframes(slide-down) { 0% { opacity: 1; } 90% { opacity: 0; } }\r\n@mixin keyframes($animation-name) {\r\n    @-webkit-keyframes #{$animation-name} {\r\n        @content;\r\n    }\r\n    @-moz-keyframes #{$animation-name} {\r\n        @content;\r\n    }\r\n    @-ms-keyframes #{$animation-name} {\r\n        @content;\r\n    }\r\n    @-o-keyframes #{$animation-name} {\r\n        @content;\r\n    }\r\n    @keyframes #{$animation-name} {\r\n        @content;\r\n    }\r\n}\r\n// usage: @include clearfix;\r\n@mixin clearfix {\r\n    *zoom: 1;\r\n    &:before,\r\n    &:after {\r\n        display: table;\r\n        content: ' ';\r\n    }\r\n    &:after {\r\n        clear: both;\r\n    }\r\n}\r\n// usage: @include border-triangle;\r\n@mixin border-triangle {\r\n    &:after {\r\n        position: absolute;\r\n        top: 100%;\r\n        left: 40px;\r\n        display: block;\r\n        width: 29px;\r\n        height: 17px;\r\n        content: '';\r\n        background-image: url(../img/sprite.png);\r\n        background-position: -154px -132px;\r\n    }\r\n}\r\n// usage: @include box-shadow(2px 2px 5px 0 rgba(0,0,0,.75));\r\n@mixin box-shadow($properties) {\r\n    -webkit-box-shadow: $properties ;\r\n    -moz-box-shadow: $properties ;\r\n    box-shadow: $properties ;\r\n}\r\n// Flexbox Mixins\r\n// http://philipwalton.github.io/solved-by-flexbox/\r\n// https://github.com/philipwalton/solved-by-flexbox\r\n//\r\n// Copyright (c) 2013 Brian Franco\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n// This is a set of mixins for those who want to mess around with flexbox\r\n// using the native support of current browsers. For full support table\r\n// check: http://caniuse.com/flexbox\r\n//\r\n// Basically this will use:\r\n//\r\n// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)\r\n// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)\r\n//\r\n// This was inspired by:\r\n//\r\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\r\n//\r\n// With help from:\r\n//\r\n// * http://w3.org/tr/css3-flexbox/\r\n// * http://the-echoplex.net/flexyboxes/\r\n// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx\r\n// * http://css-tricks.com/using-flexbox/\r\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\r\n// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Containers\r\n//\r\n// The 'flex' value causes an element to generate a block-level flex\r\n// container box.\r\n//\r\n// The 'inline-flex' value causes an element to generate a inline-level\r\n// flex container box.\r\n//\r\n// display: flex | inline-flex\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-containers\r\n//\r\n// (Placeholder selectors for each type, for those who rather @extend)\r\n\r\n@mixin flexbox {\r\n    display: -webkit-box;\r\n    display: -webkit-flex;\r\n    display: -moz-flex;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n}\r\n\r\n%flexbox {\r\n    @include flexbox;\r\n}\r\n\r\n//----------------------------------\r\n\r\n@mixin inline-flex {\r\n    display: -webkit-inline-box;\r\n    display: -webkit-inline-flex;\r\n    display: -moz-inline-flex;\r\n    display: -ms-inline-flexbox;\r\n    display: inline-flex;\r\n}\r\n\r\n%inline-flex {\r\n    @include inline-flex;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Direction\r\n//\r\n// The 'flex-direction' property specifies how flex items are placed in\r\n// the flex container, by setting the direction of the flex container's\r\n// main axis. This determines the direction that flex items are laid out in.\r\n//\r\n// Values: row | row-reverse | column | column-reverse\r\n// Default: row\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-direction-property\r\n\r\n@mixin flex-direction($value: row) {\r\n    flex-direction: $value;\r\n    -webkit-flex-direction: $value;\r\n\r\n    -moz-flex-direction: $value;\r\n    -ms-flex-direction: $value;\r\n    @if $value == row-reverse {\r\n        -webkit-box-direction: reverse;\r\n        -webkit-box-orient: horizontal;\r\n    } @else if $value == column {\r\n        -webkit-box-direction: normal;\r\n        -webkit-box-orient: vertical;\r\n    } @else if $value == column-reverse {\r\n        -webkit-box-direction: reverse;\r\n        -webkit-box-orient: vertical;\r\n    } @else {\r\n        -webkit-box-direction: normal;\r\n        -webkit-box-orient: horizontal;\r\n    }\r\n}\r\n// Shorter version:\r\n@mixin flex-dir($args...) {\r\n    @include flex-direction($args...);\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Wrap\r\n//\r\n// The 'flex-wrap' property controls whether the flex container is single-line\r\n// or multi-line, and the direction of the cross-axis, which determines\r\n// the direction new lines are stacked in.\r\n//\r\n// Values: nowrap | wrap | wrap-reverse\r\n// Default: nowrap\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-wrap-property\r\n\r\n@mixin flex-wrap($value: nowrap) {\r\n    flex-wrap: $value;\r\n    // No Webkit Box fallback.\r\n    -webkit-flex-wrap: $value;\r\n\r\n    -moz-flex-wrap: $value;\r\n    @if $value == nowrap {\r\n        -ms-flex-wrap: none;\r\n    } @else {\r\n        -ms-flex-wrap: $value;\r\n    }\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Flow (shorthand)\r\n//\r\n// The 'flex-flow' property is a shorthand for setting the 'flex-direction'\r\n// and 'flex-wrap' properties, which together define the flex container's\r\n// main and cross axes.\r\n//\r\n// Values: <flex-direction> | <flex-wrap>\r\n// Default: row nowrap\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-flow-property\r\n\r\n@mixin flex-flow($values: (row nowrap)) {\r\n    // No Webkit Box fallback.\r\n    -webkit-flex-flow: $values;\r\n    -moz-flex-flow: $values;\r\n    -ms-flex-flow: $values;\r\n    flex-flow: $values;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Order\r\n//\r\n// The 'order' property controls the order in which flex items appear within\r\n// their flex container, by assigning them to ordinal groups.\r\n//\r\n// Default: 0\r\n//\r\n// http://w3.org/tr/css3-flexbox/#order-property\r\n\r\n@mixin order($int: 0) {\r\n    -webkit-box-ordinal-group: $int + 1;\r\n    -webkit-order: $int;\r\n    -moz-order: $int;\r\n    -ms-flex-order: $int;\r\n    order: $int;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Grow\r\n//\r\n// The 'flex-grow' property sets the flex grow factor. Negative numbers\r\n// are invalid.\r\n//\r\n// Default: 0\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-grow-property\r\n\r\n@mixin flex-grow($int: 0) {\r\n    -webkit-box-flex: $int;\r\n    -webkit-flex-grow: $int;\r\n    -moz-flex-grow: $int;\r\n    -ms-flex-positive: $int;\r\n    flex-grow: $int;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Shrink\r\n//\r\n// The 'flex-shrink' property sets the flex shrink factor. Negative numbers\r\n// are invalid.\r\n//\r\n// Default: 1\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-shrink-property\r\n\r\n@mixin flex-shrink($int: 1) {\r\n    -webkit-flex-shrink: $int;\r\n    -moz-flex-shrink: $int;\r\n    -ms-flex-negative: $int;\r\n    flex-shrink: $int;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Basis\r\n//\r\n// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.\r\n//\r\n// Values: Like \"width\"\r\n// Default: auto\r\n//\r\n// http://www.w3.org/TR/css3-flexbox/#flex-basis-property\r\n\r\n@mixin flex-basis($value: auto) {\r\n    -webkit-flex-basis: $value;\r\n    -moz-flex-basis: $value;\r\n    -ms-flex-preferred-size: $value;\r\n    flex-basis: $value;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox \"Flex\" (shorthand)\r\n//\r\n// The 'flex' property specifies the components of a flexible length: the\r\n// flex grow factor and flex shrink factor, and the flex basis. When an\r\n// element is a flex item, 'flex' is consulted instead of the main size\r\n// property to determine the main size of the element. If an element is\r\n// not a flex item, 'flex' has no effect.\r\n//\r\n// Values: none | <flex-grow> <flex-shrink> || <flex-basis>\r\n// Default: See individual properties (1 1 0).\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-property\r\n\r\n@mixin flex($fg: 1, $fs: null, $fb: null) {\r\n    // Set a variable to be used by box-flex properties\r\n    $fg-boxflex: $fg;\r\n    flex: $fg $fs $fb;\r\n    -webkit-flex: $fg $fs $fb;\r\n    -ms-flex: $fg $fs $fb;\r\n\r\n    -webkit-box-flex: $fg-boxflex;\r\n    -moz-box-flex: $fg-boxflex;\r\n    -moz-flex: $fg $fs $fb;\r\n    // Box-Flex only supports a flex-grow value so let's grab the\r\n    // first item in the list and just return that.\r\n    @if type-of($fg) == 'list' {\r\n        $fg-boxflex: nth($fg, 1);\r\n    }\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Justify Content\r\n//\r\n// The 'justify-content' property aligns flex items along the main axis\r\n// of the current line of the flex container. This is done after any flexible\r\n// lengths and any auto margins have been resolved. Typically it helps distribute\r\n// extra free space leftover when either all the flex items on a line are\r\n// inflexible, or are flexible but have reached their maximum size. It also\r\n// exerts some control over the alignment of items when they overflow the line.\r\n//\r\n// Note: 'space-*' values not supported in older syntaxes.\r\n//\r\n// Values: flex-start | flex-end | center | space-between | space-around\r\n// Default: flex-start\r\n//\r\n// http://w3.org/tr/css3-flexbox/#justify-content-property\r\n\r\n@mixin justify-content($value: flex-start) {\r\n    justify-content: $value;\r\n    -webkit-justify-content: $value;\r\n\r\n    -moz-justify-content: $value;\r\n    @if $value == flex-start {\r\n        -webkit-box-pack: start;\r\n        -ms-flex-pack: start;\r\n    } @else if $value == flex-end {\r\n        -webkit-box-pack: end;\r\n        -ms-flex-pack: end;\r\n    } @else if $value == space-between {\r\n        -webkit-box-pack: justify;\r\n        -ms-flex-pack: justify;\r\n    } @else if $value == space-around {\r\n        -ms-flex-pack: distribute;\r\n    } @else {\r\n        -webkit-box-pack: $value;\r\n        -ms-flex-pack: $value;\r\n    }\r\n}\r\n// Shorter version:\r\n@mixin flex-just($args...) {\r\n    @include justify-content($args...);\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Align Items\r\n//\r\n// Flex items can be aligned in the cross axis of the current line of the\r\n// flex container, similar to 'justify-content' but in the perpendicular\r\n// direction. 'align-items' sets the default alignment for all of the flex\r\n// container's items, including anonymous flex items. 'align-self' allows\r\n// this default alignment to be overridden for individual flex items. (For\r\n// anonymous flex items, 'align-self' always matches the value of 'align-items'\r\n// on their associated flex container.)\r\n//\r\n// Values: flex-start | flex-end | center | baseline | stretch\r\n// Default: stretch\r\n//\r\n// http://w3.org/tr/css3-flexbox/#align-items-property\r\n\r\n@mixin align-items($value: stretch) {\r\n    align-items: $value;\r\n    -webkit-align-items: $value;\r\n\r\n    -moz-align-items: $value;\r\n    @if $value == flex-start {\r\n        -webkit-box-align: start;\r\n        -ms-flex-align: start;\r\n    } @else if $value == flex-end {\r\n        -webkit-box-align: end;\r\n        -ms-flex-align: end;\r\n    } @else {\r\n        -webkit-box-align: $value;\r\n        -ms-flex-align: $value;\r\n    }\r\n}\r\n\r\n//----------------------------------\r\n\r\n// Flexbox Align Self\r\n//\r\n// Values: auto | flex-start | flex-end | center | baseline | stretch\r\n// Default: auto\r\n\r\n@mixin align-self($value: auto) {\r\n    // No Webkit Box Fallback.\r\n    -webkit-align-self: $value;\r\n    -moz-align-self: $value;\r\n    align-self: $value;\r\n    @if $value == flex-start {\r\n        -ms-flex-item-align: start;\r\n    } @else if $value == flex-end {\r\n        -ms-flex-item-align: end;\r\n    } @else {\r\n        -ms-flex-item-align: $value;\r\n    }\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Align Content\r\n//\r\n// The 'align-content' property aligns a flex container's lines within the\r\n// flex container when there is extra space in the cross-axis, similar to\r\n// how 'justify-content' aligns individual items within the main-axis. Note,\r\n// this property has no effect when the flexbox has only a single line.\r\n//\r\n// Values: flex-start | flex-end | center | space-between | space-around | stretch\r\n// Default: stretch\r\n//\r\n// http://w3.org/tr/css3-flexbox/#align-content-property\r\n\r\n@mixin align-content($value: stretch) {\r\n    align-content: $value;\r\n    // No Webkit Box Fallback.\r\n\r\n    -webkit-align-content: $value;\r\n    -moz-align-content: $value;\r\n    @if $value == flex-start {\r\n        -ms-flex-line-pack: start;\r\n    } @else if $value == flex-end {\r\n        -ms-flex-line-pack: end;\r\n    } @else {\r\n        -ms-flex-line-pack: $value;\r\n    }\r\n}\r\n// =============================================================================\r\n// String Replace\r\n// =============================================================================\r\n\r\n@function str-replace($string, $search, $replace: '') {\r\n    $index: str-index($string, $search);\r\n    @if $index {\r\n        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\r\n    }\r\n    @return $string;\r\n}\r\n\r\n// =============================================================================\r\n// Font Face\r\n// =============================================================================\r\n\r\n// usage: @include font-face(Samplinal, \"fonts/Samplinal\", 500, normal, eot woff2 woff);\r\n// usage: @include font-face(\"Samplina Neue\", \"fonts/SamplinaNeue\", bold, italic); (eot, woff2, woff, truetype, svg)\r\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\r\n    $src: null;\r\n    $extmods: (\r\n    eot: '?',\r\n    svg: '#' + str-replace($name, ' ', '_')\r\n    );\r\n    $formats: (\r\n    otf: 'opentype',\r\n    ttf: 'truetype'\r\n    );\r\n    @each $ext in $exts {\r\n        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\r\n        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\r\n        $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);\r\n    }\r\n    @font-face {\r\n        font-family: quote($name);\r\n        font-weight: $weight;\r\n        font-style: $style;\r\n\r\n        src: $src;\r\n    }\r\n}\r\n"
	],
	"names": [],
	"mappings": "AACA,MAAM,CAAN,EAAM,CACJ,aAAa,CAAE,KAAK,CACpB,aAAa,CAAE,IAAI,CACnB,aAAa,CAAE,GAAG,CAClB,cAAc,CAAE,GAAG"
}